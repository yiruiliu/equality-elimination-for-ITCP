linprogMax := function(obj,A,b) ## max(obj*x) given Ax<= b, -x <= LB
  local  s, rlist;
  rlist:=LoadQSLP([],A,b,[],qs_exec);
  s:=rlist[1];
  LoadQSLPobj(s, obj);
  SolveQSLP(s,[]);
  rlist:=GetQSLPsol_primal(s);
  return [rlist[3],rlist[5]]; # [max(obj*x), x] 
end;

EqualityEliminationDetectfFullDim := function(A,b)
  local f, Anew, acol, AnewT, arow,bnew, LB, I, XFVAL;
  f := ZeroMutable([1..Size(A[1])]);
  Append(f,[1]);
  Anew := ShallowCopy(A);
  acol := ZeroMutable([1..Size(A)]) + 1;
  AnewT := TransposedMat(Anew);
  AnewT := ShallowCopy(AnewT);
  Append(AnewT,[acol]);
  Anew := TransposedMat(AnewT);
  Anew := ShallowCopy(Anew);
  arow := ZeroMutable([1..Size(A[1])]);
  Append(arow,[1]);
  Append(Anew,[arow]);
  bnew := ShallowCopy(b);
  Append(bnew,[1]);
  LB := ZeroMutable([1..Size(A[1])]);
  Append(bnew,LB);
  I := -IdentityMat(Size(Anew[1])){[1..Size(Anew[1]) - 1]};
  Append(Anew, I);
  XFVAL := linprogMax(f,Anew,bnew);
  return[XFVAL[1],XFVAL[2]];
end;

EqualityEliminationEE := function(E1, A)
#eliminate bounded variables Dx'=c from Bx<=b
#where E=[D|-c],A=[B|-b]
  local AA, R, RT, jb, i, col, row, rr, Aa, j, k, c;
  AA := ShallowCopy(A);
  R := RREF(E1);
  RT := TransposedMat(R);
  jb := [];
  for i in [1..Size(RT)] do
    col := RT[i];
    if Maximum(col) = 1 then
      Append(jb,[i]);
    fi;
  od;
  for i in [1..Size(jb)] do
    row := R[i];
    row[jb[i]] := 0;
    rr := Difference([1..Size(row)], Positions(row,0));
    Aa := NullMat(Size(AA),Size(AA[1]));
    for j in [1..Size(rr)] do
      for k in [1..Size(AA)] do
        c := AA[k][jb[i]] * -row[rr[j]];
        Aa[k][rr[j]] := c;
      od;
    od;
    AA := AA + Aa;
  od;
  for k in [1..Size(AA)] do
    for j in [1..Size(jb)] do
      AA[k][jb[j]] := 0;
    od;
  od;
  return AA;
end;
